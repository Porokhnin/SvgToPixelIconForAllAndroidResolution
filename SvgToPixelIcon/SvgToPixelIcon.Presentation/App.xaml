<Application x:Class="SvgToPixelIcon.Presentation.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:system="clr-namespace:System;assembly=mscorlib">
    <Application.Resources>
        <!--По умолчанию размер ширифта 12-->
        <system:Double x:Key="TextFontSize">12.8</system:Double>
        <system:Double x:Key="Height">22</system:Double>

        <SolidColorBrush x:Key="SelectedRow"  Color="Transparent"/>

        <Style TargetType="{x:Type FrameworkElement}" x:Key="FrameworkElementErrorStyle">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="true">
                            <TextBlock DockPanel.Dock="Bottom"
                                       Foreground="Red" 
                                       FontStyle="Italic"
                                       FontSize="11"
                                       Text="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            </TextBlock>
                            <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center">
                                <Border BorderBrush="Red" BorderThickness="1" CornerRadius="1" />
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TextBlockStyle" TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="FontSize" Value="{StaticResource TextFontSize}"/>
            <Setter Property="Margin" Value="0,0,5,0"/>
        </Style>

        <Style x:Key="TextBoxStyle" TargetType="TextBox"
               BasedOn="{StaticResource ResourceKey=FrameworkElementErrorStyle}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="FontSize" Value="{StaticResource TextFontSize}"/>
            <Setter Property="Height" Value="{StaticResource Height}"/>
        </Style>

        <Style x:Key="HeaderTextBlockStyle"  TargetType="TextBlock">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextAlignment" Value="Left"/>
            <Setter Property="Padding" Value="5,0,0,0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontStretch" Value="Expanded"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>

        <Style x:Key="HeaderBorderStyle"  TargetType="Border">
            <Setter Property="BorderThickness" Value="0,0,0,0"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="Background" Value="AliceBlue"/>
        </Style>
        
        <Style x:Key="TreeViewItemContainerStyle"  TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="IsExpanded" Value="True"/>
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            <!--Это решение проблемы растягивания элемента дерева по ширине-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TreeViewItem">
                        <Border Margin="0,0,0,0">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsDropHere}" Value="True">
                                            <Setter Property="BorderBrush" Value="#adc6e5"/>
                                            <Setter Property="Background" Value="#E3F2FD"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="19" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              ClickMode="Press"
                                              Name="Expander">
                                    <ToggleButton.Style>
                                        <Style TargetType="ToggleButton">
                                            <Setter Property="UIElement.Focusable"
                                                        Value="false" />
                                            <Setter Property="FrameworkElement.Width"
                                                        Value="16" />
                                            <Setter Property="FrameworkElement.Height"
                                                        Value="16" />
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Border Padding="5"
                                                                    Background="#00FFFFFF"
                                                                    Width="16"
                                                                    Height="16">
                                                            <Path Fill="#00FFFFFF"
                                                                      Stroke="#FF989898"
                                                                      Name="ExpandPath">
                                                                <Path.Data>
                                                                    <PathGeometry Figures="M0,0 L0,6 L6,0z" />
                                                                </Path.Data>
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="135"
                                                                                         CenterX="3"
                                                                                         CenterY="3" />
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="UIElement.IsMouseOver"
                                                                         Value="True">
                                                                <Setter TargetName="ExpandPath"
                                                                            Property="Shape.Stroke"
                                                                            Value="#FF1BBBFA" />
                                                                <Setter TargetName="ExpandPath"
                                                                            Property="Shape.Fill"
                                                                            Value="#00FFFFFF" />
                                                            </Trigger>
                                                            <Trigger Property="ToggleButton.IsChecked"
                                                                         Value="True">
                                                                <Setter TargetName="ExpandPath"
                                                                            Property="UIElement.RenderTransform">
                                                                    <Setter.Value>
                                                                        <RotateTransform Angle="180"
                                                                                             CenterX="3"
                                                                                             CenterY="3" />
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter TargetName="ExpandPath"
                                                                            Property="Shape.Fill"
                                                                            Value="#FF595959" />
                                                                <Setter TargetName="ExpandPath"
                                                                            Property="Shape.Stroke"
                                                                            Value="#FF262626" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <Border x:Name="Bd"
                                            HorizontalAlignment="Stretch" 
                                            BorderThickness="{TemplateBinding Border.BorderThickness}"
                                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                                            Padding="{TemplateBinding Control.Padding}"
                                            Background="{TemplateBinding Panel.Background}"
                                            SnapsToDevicePixels="True"
                                            Grid.Column="1">
                                    <ContentPresenter x:Name="PART_Header"
                                                          Content="{TemplateBinding HeaderedContentControl.Header}"
                                                          ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                                          ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                                          ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                                          ContentSource="Header"
                                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                          Margin="0,-1,0,-1"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost"
                                                    Grid.Column="1"
                                                    Grid.Row="1"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TreeViewItem.IsExpanded"
                                         Value="False">
                                <Setter TargetName="ItemsHost"
                                            Property="UIElement.Visibility"
                                            Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="ItemsControl.HasItems"
                                         Value="False">
                                <Setter TargetName="Expander"
                                            Property="UIElement.Visibility"
                                            Value="Hidden" />
                            </Trigger>
                            <Trigger Property="TreeViewItem.IsSelected"
                                         Value="True">
                                <Setter TargetName="Bd"
                                            Property="Panel.Background"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property="TextElement.Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="TreeViewItem.IsSelected"
                                                   Value="True" />
                                    <Condition Property="Selector.IsSelectionActive"
                                                   Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd"
                                            Property="Panel.Background"
                                            Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                <Setter Property="TextElement.Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsEnabled"
                                         Value="False">
                                <Setter Property="TextElement.Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Конец решения проблемы растягивания элемента дерева по ширине-->
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="BorderBrush" Value="#adc6e5"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="IsSelectionActive" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="LightGray"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="TreeViewStyle"  TargetType="TreeView">
            <Setter Property="BorderThickness" Value="0,0,0,0"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="FontSize" Value="{StaticResource TextFontSize}"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemContainerStyle}"></Setter>
        </Style>
        
        <ControlTemplate x:Key="ButtonColorTemplate" TargetType="{x:Type Button}">
            <Border Width="{TemplateBinding Width}"
                    Height="{TemplateBinding Height}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  TextElement.Foreground="{TemplateBinding Foreground}"
                                  TextElement.FontFamily="{TemplateBinding FontFamily}"
                                  TextElement.FontSize="{TemplateBinding FontSize}"
                                  TextElement.FontStretch="{TemplateBinding FontStretch}"
                                  TextElement.FontWeight="{TemplateBinding FontWeight}"/>
            </Border>
        </ControlTemplate>
        <Style x:Key="ButtonColorStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{x:Null}" />
            <Setter Property="BorderBrush" Value="{x:Null}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template" Value="{StaticResource ButtonColorTemplate}" />
        </Style>

        <Style x:Key="ButtonStyle" TargetType="Button">
            <Setter Property="Height" Value="25"/>
        </Style>

        <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="130"/>
        </Style>

        <Style TargetType="{x:Type xctk:CheckListBox}" x:Key="CheckListBoxErrorStyle">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type xctk:SelectorItem}">
                        <Style.Resources>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightColor}" Color="Transparent"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightColorKey}" Color="Transparent"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrush}" Color="Transparent"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrush}" Color="Black"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrush}" Color="Black"/>
                            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black"/>
                        </Style.Resources>
                        <Setter Property="Margin" Value="2"/>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True" >
                                <Setter Property="FontWeight" Value="DemiBold" />
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                            <Trigger Property="Control.IsMouseOver" Value="True">
                                <Setter Property="FontWeight" Value="DemiBold" />
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="true">
                            <TextBlock DockPanel.Dock="Bottom"
                                       Foreground="Red" FontStyle="Italic"
                                       Text="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            </TextBlock>
                            <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center">
                                <Border BorderBrush="Red" BorderThickness="2" />
                            </AdornedElementPlaceholder>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
            <Style.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black"/>
            </Style.Resources>
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0" />
            <Style.Triggers>
                <Trigger Property="Control.IsMouseOver" Value="True">
                    <Setter Property="FontWeight" Value="DemiBold" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="Black" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="RowStyle" Value="{StaticResource ResourceKey=DataGridRowStyle}" />
            <Setter Property="CellStyle" Value="{StaticResource ResourceKey=DataGridCellStyle}" />
            <Setter Property="Background" Value="White"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="RowHeaderWidth" Value="0"/>
            <Setter Property="CanUserAddRows" Value="False"/>
            <Setter Property="CanUserDeleteRows" Value="False"/>
            <Setter Property="CanUserReorderColumns" Value="False"/>
            <Setter Property="CanUserResizeRows" Value="False"/>
            <Setter Property="CanUserResizeColumns" Value="False"/>
            <Setter Property="CanUserSortColumns" Value="False"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="EnableRowVirtualization" Value="True"/>
            <Setter Property="SelectionUnit" Value="FullRow"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FontSize" Value="{StaticResource TextFontSize}"/>
        </Style>

        <Style x:Key="DataGridHeaderStyle" TargetType="DataGridColumnHeader">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="GhostWhite"/>
            <Setter Property="BorderThickness" Value="0,1,1,1"/>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="SeparatorBrush" Value="Black"/>
        </Style>

        <Style x:Key="GridSplitterStyle"  TargetType="GridSplitter">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="ResizeBehavior" Value="PreviousAndNext"/>
            <Setter Property="Background" Value="Black"/>
        </Style>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </Application.Resources>
</Application>
